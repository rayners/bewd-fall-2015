* Document Object Model, CSS Selectors, jQuery

** Brief Definitions

*** Document Object Model (DOM)

  Standardized, cross-platform represenation of an HTML document with methods to interact with the HTML

*** CSS Selectors

  Identifier or identifiers used to select an element or elements within the DOM to manipulate it or style it
  
*** jQuery

  JavaScript library which simplifies DOM manipulation, event handling, and more


** Document Object Model (DOM)

  The DOM represents an HTML page and can be accessed with any programming language, though it is most often accessed through client side JavaScript.
  
  This example is shamelessly stolen from [[https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction][Mozilla Developer Network]].
  
  #+BEGIN_SRC js
    <script>
      window.onload = function() {
        // create a couple of elements in an otherwise empty HTML page
        var heading = document.createElement("h1");
        var heading_text = document.createTextNode("Big Head!");
        heading.appendChild(heading_text);
        document.body.appendChild(heading);
      }
    </script>
  #+END_SRC

  The above example demonstrates a few key components: =window=, =document=, elements, and methods ([[https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model][see more here]])

*** =window=

  The =window= element can be thought of as the browser.  With =window=, a few things you can do are
  
  * =window.onload= - see if a page is loading
  * =window.alert= - create alerts
  * =window.navigator= - check a user's browser
  
*** =document=
  The =document= object is the root of the entire HTML page. With =document=, a few things you'll likely do are
  
  * =document.body= - access the =<body>= element of the document
  * =document.createElement= - create an HTML element
  * =document.getElementsByTagName('tag')= - get all the elements with a specific tag
  * =document.getElementById('id')= - get the unique element with specific ID
  * =document.getElementsByClassName('class')= - get all the elements with a specific class

*** Elements

  Elements are what make up the DOM. Any HTML tag is considered an element. This includes body and head, which are accessed from the =document= with =document.body= and =document.head=. Common element methods include
  
  * =element.getElementsByTagName= - get all the child elements with a specific tag
  * =element.getElementsByClassName= - get all the child elements with a specific class
  * =element.appendChild= - once you have created an element or retrieved one, you can append it at the end of another element with this method
  * =element.getAttribute= - once you have an element, you can check its attributes with this method
  
  Note: There is no =element.getElementById= because if you're getting an element by its ID, you should just should the =document= method

** CSS Selectors

  CSS (Cascading Style Sheets) are used to style HTML pages. That typically looks like
  
  #+BEGIN_SRC css
    /* This entire code block is a rule */
    tag#id.class[attribute="target"] { /* Selectors */
      property: value; /* Styling declaration(s) */
    }
    
    /* More specific example */
    form#profile.red[method="post"] {
      color: white;
    }
  #+END_SRC
  
  And the above code would style HTML which looks like
  
  #+BEGIN_SRC html
    <tag class="class" id="id" attribute="target">...</tag>
    <form class="red" id="profile" method="post">...</form> 
  #+END_SRC
  
  There are a confusing amount of CSS selectors ([[http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048][see more here]]) but we'll just cover a few essentials: =tag=, =ID=, =class=, =attribute=, and =descendant=.

*** tag-selector

  The tag selector targets any HTML element with that particular.
  
  #+BEGIN_SRC css
    p {
      property: value;
    }
  #+END_SRC
  
  #+BEGIN_SRC html
    <p>...</p> 
  #+END_SRC
  
*** #id-selector

  The ID selector is meant to be unique on the page. No HTML element should share an ID with another element. Each element should only house one ID.
  
  #+BEGIN_SRC css
    #sidebar {
      property: value;
    }
  #+END_SRC
  
  #+BEGIN_SRC html
    <div id="sidebar">...</div> 
  #+END_SRC

*** .class-selector

  Like the tag selector, the class selector can be used on multiple elements on the page. Any element can house multiple classes
  
  #+BEGIN_SRC css
    .menu-item {
      property: value;
    }
  #+END_SRC
  
  #+BEGIN_SRC html
    <div class="menu-item red">...</div> 
    <div class="menu-item blue">...</div> 
  #+END_SRC

*** [attribute="selector"]

  The attribute selector can also be used on multiple HTML elements. Anything that isn't the tag of an element is an attribute.
  
  #+BEGIN_SRC css
    .menu-item {
      property: value;
    }
  #+END_SRC
    
  #+BEGIN_SRC html
    <div class="menu-item red">...</div> 
    <div class="menu-item blue">...</div> 
  #+END_SRC

  Interesting note: You could use the attribute selector to target classes and IDs but that would be inconvenient.

*** .descendant .selector

  The above selectors can all be used individually or they can be used in combination, like with the descendant selector.
  
  This selector is used for targeting elements which are nested inside other elements.

  #+BEGIN_SRC css
    #sidebar .menu-item {
      property: value;
    }
  #+END_SRC
    
  #+BEGIN_SRC html
    <div id="sidebar">
      <div class="menu-item red">...</div> 
      <div class="menu-item blue">...</div>
    </div>
  #+END_SRC

** jQuery

  jQuery is a JavaScript library that combines DOM manipulation and event handling with the ease of CSS selectors. So instead of writing =document.get...= every time, you can use the simpler jQuery =$()= function call to retrieve elements and then manipulate them.
  
  | jQuery Code | DOM Code |
  |-+-|
  | =$('div')= | =document.getElementsByTagName('div')= |
  | =$('#sidebar')= | =document.getElementById('sidebar')= |
  | =$('.menu-item')= | =document.getElementsByClassName('menu-item')= |
  | =$('#sidebar .menu-item')= | =document.getElementById('sidebar').getElementsByClassName('menu-item')= |
  
  The comparison above demonstrates that once you go beyond using single selectors, jQuery provides a far more elegant and easy to read solution for element retrieval.
  
  Also, jQuery is even more elegant for DOM manipulation, as seen here
  
  | 1 line in jQuery | 4 lines in DOM |
  |-+-|
  | =$('body').append('<h1>Big Head!</h1>')= | =var heading = document.createElement("h1");= |
  | | =var heading_text = document.createTextNode("Big Head!");= |
  | | =heading.appendChild(heading_text);= |
  | | =document.body.appendChild(heading);= |
  
  And jQuery also allows you to easily manipulate or handle events for those retrieved elements, with methods like
  
  * =elements.addClass('class1 class2')= - add the specified class to each element retrieved
  * =elements.toggleClass('active')= - add the class to each element if it's not there, remove it if it is
  * =elements.append(newElement)= - append the newElement to each element within elements
  * =elements.each(function)= - execute the given function on each element
  * =elements.click(function)= - binds the function to each element, so when a particular element is clicked, the function gets ran
  
  The jQuery API has a lot to it ([[http://api.jquery.com/][see the full list of methods here]) and can be overwhelming. But the main pages to get started with are [[http://api.jquery.com/category/selectors/][selectors]], [[http://api.jquery.com/category/css/][CSS]], [[manipulation][http://api.jquery.com/category/manipulation/], and [[http://api.jquery.com/category/events/][events]]


* Packaging for the web
  "Push less over fewer connections"

  Right now, my version of the application loads about 1.5 MB of data in about ~300 ms.

  - What are some ways we can push less bits over fewer connections?

** Combine our JS files!

   - =npm install --save gulp-concat=

   #+BEGIN_SRC js
     var webFiles = ['js/**/*.js'];
     var concat = require('gulp-concat');
     gulp.task('build', function() {
       return gulp.src(webFiles)
         .pipe(concat('tictactoe.js'))
         .pipe(gulp.dest('public/dist'));
     });
   #+END_SRC

** Squish them!

   - =npm install --save gulp-uglify=

   #+BEGIN_SRC js
     var concat = require('gulp-concat'),
       uglify = require('gulp-uglify');
     gulp.task('build', function() {
       return gulp.src(webFiles)
         .pipe(concat('tictactoe.js'))
         .pipe(uglify())
         .pipe(gulp.dest('public/dist'));
     });
   #+END_SRC

   #+BEGIN_SRC shell
     ~/Code/tictactoe (git)-[master]U % gulp build
     [23:26:53] Using gulpfile ~/Code/tictactoe/gulpfile.js
     [23:26:53] Starting 'build'...
     [23:26:53] Finished 'build' after 30 ms
     ~/Code/tictactoe (git)-[master]U % ls -l public/dist
     total 24
     -rw-r--r--  1 draynes14  AOL\Domain Users  5014 Nov  8 23:26 tictactoe.js
   #+END_SRC

   #+BEGIN_SRC shell
     ~/Code/tictactoe (git)-[master]U % gulp build
     [23:27:41] Using gulpfile ~/Code/tictactoe/gulpfile.js
     [23:27:41] Starting 'build'...
     [23:27:41] Finished 'build' after 167 ms
     ~/Code/tictactoe (git)-[master]U % ls -l public/dist
     total 16
     -rw-r--r--  1 draynes14  AOL\Domain Users  4351 Nov  8 23:27 tictactoe.js
   #+END_SRC

   Not a ton of reduced space, but also note that we have almost
   /zero/ comments in our code, which would be one of the main things
   removed in the squishing.

** Any downsides?

   - Debugging!


* Regular Expressions

*** =*= (wildcard)
  This will match any character: space, letter, number, special character, etc.
  
  Use with caution!

*** Repetitions

  These meta-characters allow you to match the preceding character a specified number of times. They match greedily, meaning that they will eat up as much of the string as possible.

  * =*= (0 or more repetitions) - this will match 0 or more of the preceding character or group
    * =a*= will match any number of a's
  * =?= (0 or 1 repetitions) - this will match 0 or 1 of the preceding character or group
    * =a?= will match 0 or 1 of a's
  * =+= (1 or more repetitions) - this will match 1 or more of the preceding character or group
    * =a+= will match at least 1 a
  * ={n,m}= (n to m repetitions) - this will match between =n= and =m= of the preceding character or group
    * =n= and =m= can be left empty to specify only a maximum or minimum number of repetitions
    * =a{3,7}= will match between 3 and 7 a's
    * =a{3,}= will match at least 3 a's
    * =a{,7}= will match no more than 7 a's
  * ={n}= (exactly n repetitions) - this will match 0 or 1 of the preceding character or group
    * =a{5}= will match 5 a's

*** =?= (lazy matching)

  Opposite greedy matching is lazy matching, meaning that the RegEx will now eat up as little of the string as possible. To do this, you place a =?= after the repetition character. So =*?=, =??=, =+?=.

*** =[chars]= (character classes)

  Anything in between square braces is referred to as a character class. This means that you will match on any one of those characters just once. So =[aeiou]= will match any one vowel

*** =^= and =$=

  The =^= represents the beginning of a line. The =$= represents the end of it.

*** =(groups)= (grouping)

  To capture a match so you can use it for find and replace, place what you want captured in parentheses. For instance if you wish to capture a word that is followed by any number of spaces, write =(\w+)\s+=.

*** Useful Tools and Resources
  Testing - https://regex101.com/
  
  Visualizer - http://regexper.com/
  
  * [[http://regexper.com/#%2F%5E%5Cd%7B5%7D(%3F%3A%5B-%5Cs%5D%5Cd%7B4%7D)%3F%24%2F][Zip Code RegEx]]
  * [[http://regexper.com/#%5E(%3F%3A(%3F%3Ahttps%3F%7Cftp)%3A%5C%2F%5C%2F)(%3F%3A%5CS%2B(%3F%3A%3A%5CS*)%3F%40)%3F(%3F%3A(%3F!10(%3F%3A%5C.%5Cd%7B1%2C3%7D)%7B3%7D)(%3F!127(%3F%3A%5C.%5Cd%7B1%2C3%7D)%7B3%7D)(%3F!169%5C.254(%3F%3A%5C.%5Cd%7B1%2C3%7D)%7B2%7D)(%3F!192%5C.168(%3F%3A%5C.%5Cd%7B1%2C3%7D)%7B2%7D)(%3F!172%5C.(%3F%3A1%5B6-9%5D%7C2%5Cd%7C3%5B0-1%5D)(%3F%3A%5C.%5Cd%7B1%2C3%7D)%7B2%7D)(%3F%3A%5B1-9%5D%5Cd%3F%7C1%5Cd%5Cd%7C2%5B01%5D%5Cd%7C22%5B0-3%5D)(%3F%3A%5C.(%3F%3A1%3F%5Cd%7B1%2C2%7D%7C2%5B0-4%5D%5Cd%7C25%5B0-5%5D))%7B2%7D(%3F%3A%5C.(%3F%3A%5B1-9%5D%5Cd%3F%7C1%5Cd%5Cd%7C2%5B0-4%5D%5Cd%7C25%5B0-4%5D))%7C(%3F%3A(%3F%3A%5Ba-z%5Cu00a1-%5Cuffff0-9%5D%2B-%3F)*%5Ba-z%5Cu00a1-%5Cuffff0-9%5D%2B)(%3F%3A%5C.(%3F%3A%5Ba-z%5Cu00a1-%5Cuffff0-9%5D%2B-%3F)*%5Ba-z%5Cu00a1-%5Cuffff0-9%5D%2B)*(%3F%3A%5C.(%3F%3A%5Ba-z%5Cu00a1-%5Cuffff%5D%7B2%2C%7D)))(%3F%3A%3A%5Cd%7B2%2C5%7D)%3F(%3F%3A%5C%2F%5B%5E%5Cs%5D*)%3F%24][URL RegEx]]  
  
  Tutorial - http://www.regular-expressions.info/
  
  Meta Characters Cheatsheet - https://www.hscripts.com/tutorials/regular-expression/metacharacter-list.php


* Angular and Google

  What does Google index? What does it look for? It reads your page,
  and follows the links in it.

** HTML Push State!

   Relatively new standard, but Google supports it and (as of
   Oct 2015) recommends it! So how do we use it in Angular?

*** Configuration

    Angular needs to know to turn on its HTML 5 settings. That's just
    a single function call.

    #+BEGIN_SRC js
      angular.module('bewd.tictactoe')
          .config(function($locationProvider) {
              $locationProvider.html5Mode(true);
          });
    #+END_SRC

    The backend also needs some changes to support this new setup:

    #+BEGIN_SRC js
      // end of routes.js

      app.get('/*', function(req, res) {
        res.render('index');
      });

      module.exports = app;
    #+END_SRC

*** Usage

    With that turned on, you can simply /remove/ all the =#= from the
    urls in your single page application (e.g., you can change
    =#/game/123= to simply =/game/123=).

    You can even go /directly/ to =/game/123= and even refresh the
    page. It'll look and seem to act like a "normal" web page, but
    it's Angular working its magic.

* Forms with files

* Topic TBD

    - Less?
    - Canvas
    - d3
    - Web sockets
    - Touch events
    - HTML 5 video/audio
    - Advanced CSS
    - Backend jobs/distributed processing/message queues

