#+OPTIONS: h:4 toc:nil

* Monday

** Followups

*** sequence diagram

#+CAPTION: Viewing a game page and clicking the Make Your Move button
[[./sequence.png]]

*** Constant Restarts

Restarting the server whenever we make a change stinks. And we
constantly forget and wonder why our code isn't working. There are
tools to help with that.

**** Gulp!

     It's a modern kind of [[https://en.wikipedia.org/wiki/Make_(software)][make]]. You define tasks and what triggers
     them.
     
     - =npm install -g gulp=
     - =npm install --save-dev gulp=
     
     This will add it to your ~package.json~ file, in the
     ~devDependencies~ section instead of ~dependencies~.

     #+BEGIN_SRC js
       // gulpfile.js

       var gulp = require('gulp');

       gulp.task('myTask', function() {
           console.log('Running my task!');
       });
     #+END_SRC

     #+BEGIN_SRC shell
       ~/Code/tictactoe (git)-[master]U % gulp myTask
       [22:02:39] Using gulpfile ~/Code/tictactoe/gulpfile.js
       [22:02:39] Starting 'myTask'...
       Running my task!
       [22:02:39] Finished 'myTask' after 116 μs
     #+END_SRC

     Exciting, right?!

     No?

     Okay, maybe something a little more practical, like running the
     server.

     - =npm install --save-dev gulp-live-server=

     #+BEGIN_SRC js
       var gulp = require('gulp'),
           gls = require('gulp-live-server');

       gulp.task('server', function() {
           var server = gls('.');
           server.start();
       });
     #+END_SRC

     #+BEGIN_SRC shell
       ~/Code/tictactoe (git)-[master]U % gulp server
       [22:07:20] Using gulpfile ~/Code/tictactoe/gulpfile.js
       [22:07:20] Starting 'server'...
       [22:07:20] Finished 'server' after 8.53 ms
       livereload[tiny-lr] listening on 35729 ...
       Example app listening at http://:::3000
     #+END_SRC

     So how is this any different than just running =node ./index.js=
     or =node .=? Well, right now it's not. But =gulp= has more for
     us!

     #+BEGIN_SRC js
       var gulp = require('gulp'),
           gls = require('gulp-live-server');

       gulp.task('server', function() {
           var server = gls('.');
           server.start().then(function(result) {
               console.log('Server exited with result:', result);
           });
           return gulp.watch('index.js', function(file) {
               server.start.apply(server);
           });
       });
     #+END_SRC

     Update a file and watch what happens. You can open up a new
     terminal window, go to your tictactoe project directory, and run
     =touch index.js=; that updates the file without actually making
     any changes to it.

     But what if we change a model file? Easy! Just a one line change:

     #+BEGIN_SRC js
       return gulp.watch(['index.js', 'models/*.js'], function(file) {
           server.start.apply(server);
       });
     #+END_SRC

*** webpack
*** ???

** Cookies! 🍪

   Yum!

   Okay, maybe not.

   So what are cookies? Cookies are bits of data stored in the browser
   for a particular domain/path combination that are included with
   every request to it. And they expire.

   How do we set them? Let's update the handlers for the =/game= url
   to use cookies.

   #+BEGIN_SRC js
     // ./index.js

     app.post('/game', function(req, res) {
         res.cookie('playerName', req.body.username);
         res.redirect('/game');
     });
   #+END_SRC

   Then we just restart the server…

   OH RIGHT!

   #+BEGIN_SRC shell
     ~/Code/tictactoe (git)-[master]U % curl -c cookiejar.txt -XPOST -v -d 'username=rayners' http://localhost:3000/game
     ,*   Trying ::1...
     ,* Connected to localhost (::1) port 3000 (#0)
     > POST /game HTTP/1.1
     > Host: localhost:3000
     > User-Agent: curl/7.43.0
     > Accept: */*
     > Content-Length: 16
     > Content-Type: application/x-www-form-urlencoded
     >
     ,* upload completely sent off: 16 out of 16 bytes
     < HTTP/1.1 302 Moved Temporarily
     < X-Powered-By: Express
     ,* Added cookie playerName="rayners" for domain localhost, path /, expire 0
     < Set-Cookie: playerName=rayners; Path=/
     < Location: /game
     < Vary: Accept
     < Content-Type: text/plain; charset=utf-8
     < Content-Length: 39
     < Date: Mon, 28 Sep 2015 03:27:02 GMT
     < Connection: keep-alive
     <
     ,* Connection #0 to host localhost left intact
     Moved Temporarily. Redirecting to /game

   #+END_SRC

   Now the cookie is stored in =cookiejar.txt= and we can send it back to the server.

   #+BEGIN_SRC shell
     ~/Code/tictactoe (git)-[master]U % curl -b cookiejar.txt -v http://localhost:3000/game
     ,*   Trying ::1...
     ,* Connected to localhost (::1) port 3000 (#0)
     > GET /game HTTP/1.1
     > Host: localhost:3000
     > User-Agent: curl/7.43.0
     > Accept: */*
     > Cookie: playerName=rayners
     >
     < HTTP/1.1 200 OK
     < X-Powered-By: Express
     < Content-Type: text/html; charset=utf-8
     < Content-Length: 1252
     < ETag: W/"4e4-DCWJw7vp7Hvh+n92QKXhHg"
     < Date: Mon, 28 Sep 2015 03:29:27 GMT
     < Connection: keep-alive
     <
     ,* Connection #0 to host localhost left intact

   #+END_SRC

   If you look at the page for [[http://localhost:3000/game][/game]] you'll notice it doesn't
   display anything though. We need to update the server to recognize
   and make use of the cookie that the browser sends with the request.

   #+BEGIN_SRC js
     // ./index.js

     app.get('/game', function(req, res) {
         var playerName = req.cookies.playerName;
         res.render('game', { username: playerName });
     });
   #+END_SRC

   Kaboom! Okay, so we are outside what comes with express out of the
   box once again. But it's a simple addition.

   - =npm install --save cookie-parser=

   #+BEGIN_SRC js
     // ./index.js

     var cookieParser = require('cookie-parser');
     app.use(cookieParser());
   #+END_SRC

   So what should get stored in a cookie? */Never store anything in a
   cookie that you would be uncomfortable with a user editing./* For
   example:

   - Anything involving money, really
     - Account balance
     - Shopping cart total
   - Database ids

   So what does that leave us?

*** Sessions

    What's a session? Volatile/temporary data[fn:: Volatile meaning
    that it could expire and go away, kept in non-permanent storage]
    stored on the server-side, referenced by an identifying value
    stored in a user's cookie.

    Where is the data stored then? That's up to you! The default
    session store is in memory, but when the server gets restarted,
    the data goes away (*super* volatile). And it's less useful in an
    environment where multiple server instances are running on
    multiple machines, and a given user could be handled by any of
    them.

    For smaller applications, data could be stored in a database
    backend. As the database grows, it is important to remember that
    the session data is going to a large amount of turnover, which
    could potentially be taxing to the database. There are more
    specialized data storage options worth considering as well, but we
    aren't going to go into them.

    - =npm install --save express-session=

    #+BEGIN_SRC js
      // ./index.js

      var session = require('express-session');
      app.use(cookieParser());
      app.use(session({
          secret: 'I see dead people'
      }));
    #+END_SRC

    That stores in it memory, but that's a little too flaky I
    think. Let's use a database! And we already have sequelize
    installed.

    - =npm install --save connect-session-sequelize=

    #+BEGIN_SRC js
      // ./index.js

      var cookieParser = require('cookie-parser');
      var session = require('express-session');

      var Sequelize = require('sequelize');
      var SequelizeStore = require('connect-session-sequelize')(session.Store);

      var sequelize = new Sequelize(
        "database",
        "username",
        "password", {
          "dialect": "sqlite",
          "storage": "./store/session.sqlite"
        });

      var store = new SequelizeStore({ db: sequelize });
      store.sync();

      app.use(cookieParser());
      app.use(session({
        saveUninitialized: false,
        resave: true,
        secret: 'I see dead people',
        store: store
      }));
    #+END_SRC

    And now we can store the user's data in a session instead of directly in the cookie.

    #+BEGIN_SRC js
      // ./index.js

      app.get('/game', function(req, res) {
        var playerName = req.session.playerName;
        res.render('game', { username: playerName });
      });

      app.post('/game', function(req, res) {
        req.session.playerName = req.body.username;
        res.redirect('/game');
      });
    #+END_SRC

** Users!

   Create the following bits of functionality for your application:

   - Registration page (=/register= perhaps?) where a user can enter a
     username and password
     - An HTML =input= tag with ~type="password"~ can be used for the
       password field in the page
   - Write a =GET= handler to render that page
   - Write a =POST= function to handle the form from that page
     - Check to see if the username already exists in the database
     - Create the user if not, and add their user id to the session
   - Login page (=/login=?) where a user can enter a username and
     password
   - Write a =GET= function to render that page
     - What should the handler do if the user is already logged in?
   - Write a =POST= function to handle the form from that page
     - Load the =User= model based on the username (and if it isn't
       found?)
     - Verify the password entered in the form against the password in
       the model
     - Log the user in if appropriate (/i.e.,/ password match)
   - Users list page (=/users=?) that lists all the users
   - Write a =GET= handler to render that page
   - Write a =POST= handler for =/logout= that will eliminate the
     current session and logging out the currently logged in user
     - What if there is no logged in user?

* Wednesday

  The theme for today is de-complex-ing our application.

  - DRY :: Don't Repeat Yourself
  - SOC :: Separation of Concerns
  - SRP :: Single Responsibility Principle
  - LoD :: Law of Demeter, loose coupling
  - POLA :: Principle of Least Astonishment
  - DI :: Dependency Injection
  - ABC :: Always Be Checking your tests
  - Dogfooding

** eslint

   [[file:week-02.org::*ESLint setup for atom][See previous notes]]

** Jade layouts

   We're writing a bunch of repetitive template code, haven't you
   noticed? Most templating systems allow have ways to make that
   easier.

   Let's start by defining the rough structure of pages for our
   application.

   #+BEGIN_SRC jade
     //- ./views/layout.jade
     doctype html
     html
       head
         include ./includes/bower_bootstrap.jade
         block title
           title Tic Tac Toe Time!

       body
         include ./includes/flash.jade
         .container
            block content
   #+END_SRC

   And the updated =index.jade= file becomes a little simpler.

   #+BEGIN_SRC jade
     extends ./layout.jade

     block title
       title Hello world!

     block content
       h1 Hello fellow citizens!

       form(name="game", action="/game", method="post")
         input(type="text", name="username")
         input(type="submit")

   #+END_SRC

   It doesn't look extremely different, but the focus of the template
   has now become the content specific to the page in question,
   instead of all the overall HTML structure.

** Handlers for all requests
*** Passing values to every template

* Original notes
** Authentication, authorization, and sessions

    - Cookies vs tokens/auth headers
    - Events
