#+OPTIONS: toc:nil

* Review

  - What have we done so far?

** Week 1

   - curl
   - node
   - mocha/chai and tests

** Week 2

   - modules
   - npm packages
   - express
   - GET requests
   - jade
   - "views"
   - GET query parameters
   - bower
   - bootstrap
   - "static assets"
   - POST requests
   - POST bodies
   - redirects
   - Angular
   - =ng-app=
   - jade includes
   - Angular interpolation (={{ ... }}=)
   - =ng-init=
   - Angular variables/data
   - Angular data binding
   - Angular digest cycle/updates
   - =ng-click=
   - =ng-repeat=
   - bootstrap forms
   - =ng-model=
   - =ng-repeat= with =filter=
   - Angular controller
   - Angular directive and scopes
   - Angular modules

** Week 3

   - =package.json= and =main=
   - Databases
   - ORMs
   - Sequelize
   - git
   - creating models
   - database migrations
   - sqlite
   - =<model>.findAll=
   - promises
   - model column getters
   - =<model>.create=
   - =<model>.findById=
   - url in express with parameters (=:game_id=)
   - model column validations
   - model creation with a POST

** Week 4

   - sequence diagram
   - gulp
   - gulp tasks and gulp server
   - cookies
   - setting in express
   - reading in express
   - cookie vulnerability
   - =cookie-parser=
   - sessions
   - updating sessions
   - user model
   - what a user needs
   - registration page
   - login page
   - password input type
   - logout page
   - programming principles
   - mostly avoid repetition and deep cross-module knowledge
   - eslint
   - layouts with jade (via =extends=)
   - =res.locals=

** Week 5

   - Adding a column with migrations
   - gulp default task
   - HTML required input
   - =ng-model-options=
   - blur, debounce
   - =<formname>.<inputname>.$invalid=, =.$dirty=, =.$error=
   - =ng-if=
   - angular-messages
   - =ng-messages=
   - =ng-message=
   - Angular directive for input validation
   - directive =require= and =link=
   - =<ctrl>.$validators.<validationname>=
   - =ng-class=
   - =<model>.findOne=
   - =res.json=
   - model class methods
   - =<ctrl>.$asyncValidators.<validationname>=
   - =$http=, =$q=
   - dependency injection
   - content negotiation
   - =Accept: application/json= header
   - =res.format=
   - optional route parameter (=.:format?=)

** Week 6

   - jade vs angular
   - git tools
   - MVC
   - model associations
   - more migrations
   - model scopes
   - mode association methods (=setXPlayer=, =addXPlayer=, ...)

** Week 7

   - heroku
   - =package.json= scripts: =start=, =postinstall=
   - =process.env.<VARNAME>=
   - setting up redis
   - postgres and production databases
   - deep into migrations (table renaming)
   - authorization (=connect-roles=)
   - emails
   - sparkpost
   - model lifecycle hooks (=beforeCreate=, =afterCreate=)

* SPA Day

** What is it?

  SPA it short for Single Page Application

  - What does that mean to you?
  - Can you think of any examples of Single Page Applications?
  - What do you think the benefits would be? The trade-offs?

** What are we going to cover?

   - Angular routing with =ng-view= and =$route=
   - Angular module =run= and =config= 
   - Application state
   - Using 3rd party angular components
   - Building out your backend API

** What are we *not* going to cover?

   - Alternative routers (=ui-router=)
   - ??

** Implementing a single page application with Angular

   It's similar to how we are using Jade for layouts. You need to
   build a shell for the application in HTML and add a tag for where
   to render your application content. That tag is =ng-view=.

   With that tag in place, you can now use =$routeProvider= in a
   config function to setup your routes.

** Config function? What?

   Angular modules, in addition to being able to define services
   (factories, etc), controllers, directives, and filters, can also
   attach functions to two main parts of the angular lifecycle.

   - config :: when the Angular code is being loaded and prepped
   - run :: when the Angular code *has* been loaded and is starting

   These functions are just like any other injectable Angular
   functions, where Angular looks at the argument names and fills them
   in for you (with some exceptions for the =config= functions).

   What's special about config functions is that you can use them to,
   amazingly enough, configure some of the services that Angular (or
   you!) provide. Routes is one example of that.

** What are routes? Where did =$routeProvider= come from?

   Angular services, factories, values, and constants (the stuff other
   than controllers and directives) are really just syntactic sugar
   (i.e., a shorthand or easier way of writing) over a core type of
   object called a provider.

   The Angular routing service is called =$route=, and when passed to
   a config function, you ask for it with the name =$routeProvider=
   because it is the provider of the =$route= service. Providers allow
   you to access the code in a service before that service is created
   and prepped for running in your Angular application.

   Other provider examples:

   - =$logProvider= :: configure whether or not debug log messages are
        displayed to the user
   - =$httpProvider= :: configure default headers and other behavior
   - =$cookieProvider= :: default properties for newly created cookies

   As for routes, routes in Angular are *very* similar to routes in
   Express. The urls are slightly different. Instead of using "pure"
   urls, Angular attaches its route handling to the location hash. The
   hash, or fragment identifier, is a web-ish way to link to a
   particular part of a page:

     - http://some.example.site/fancyPage.html#section_A_third_paragraph

   So, in a way, Angular is using it "correctly" if a little
   oddly. Angular does use it to link to particular parts of the
   page. It just happens that those parts are in a single page
   application, and the other parts are then hidden/removed.

   #+BEGIN_SRC js
     angular.module('bewd.tictactoe', ['ngRoute'])
         .config(function($routeProvider) {
             $routeProvider.when('/a/b/c', {
                 controller: 'ABCController',
                 controllerAs: 'vm',
                 templateUrl: 'a/b/c/template.html'
             });
             $routeProvider.otherwise({
                 redirectTo: '/a/b/c'
             });
         });
   #+END_SRC

* Telling Stories

  Designing the application by writing stories.

* Testing, Injecting, and Super SPAs

  One of the wonderful parts of Angular is its usage of Dependency
  Injection. We've talked about it before with regards to how easy
  testable it makes Angular code.

  For example, if we were to write a test for the =BoardController=
  controller.

  There are a couple tools we will need to install first:

    - =mocha= (remember??)
    - =chai= (remember??)
    - =karma=
    - =karma-mocha=

  Install them all with =npm install --save-dev ...= then run
  =./node_modules/.bin/karma init= to kick start the configuration for
  karma.

  #+BEGIN_SRC shell
    ~/Code/tictactoe (git)-[master]U % ./node_modules/.bin/karma init

    Which testing framework do you want to use ?
    Press tab to list possible options. Enter to move to the next question.
    > mocha

    Do you want to use Require.js ?
    This will add Require.js plugin.
    Press tab to list possible options. Enter to move to the next question.
    > no

    Do you want to capture any browsers automatically ?
    Press tab to list possible options. Enter empty string to move to the next question.
    > Chrome
    > PhantomJS
    > Safari
    >

    What is the location of your source and test files ?
    You can use glob patterns, eg. "js/*.js" or "test/**/*Spec.js".
    Enter empty string to move to the next question.
    > public/js/**/*.js
    > test/**/*-spec.js
    27 10 2015 22:57:06.101:WARN [init]: There is no file matching this pattern.

    >

    Should any of the files included by the previous patterns be excluded ?
    You can use glob patterns, eg. "**/*.swp".
    Enter empty string to move to the next question.
    >

    Do you want Karma to watch all the files and run the tests on change ?
    Press tab to list possible options.
    > yes


    Config file generated at "/Users/draynes14/Code/tictactoe/karma.conf.js".
  #+END_SRC

  That will generate a file that looks something like the following:

  #+BEGIN_SRC js
    // Karma configuration
    // Generated on Tue Oct 27 2015 22:57:19 GMT-0400 (EDT)

    module.exports = function(config) {
      config.set({

        // base path that will be used to resolve all patterns (eg. files, exclude)
        basePath: '',


        // frameworks to use
        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
        frameworks: ['mocha'],


        // list of files / patterns to load in the browser
        files: [
          'public/js/**/*.js',
          'test/**/*-spec.js'
        ],


        // list of files to exclude
        exclude: [
        ],


        // preprocess matching files before serving them to the browser
        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
        preprocessors: {
        },


        // test results reporter to use
        // possible values: 'dots', 'progress'
        // available reporters: https://npmjs.org/browse/keyword/karma-reporter
        reporters: ['progress'],


        // web server port
        port: 9876,


        // enable / disable colors in the output (reporters and logs)
        colors: true,


        // level of logging
        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
        logLevel: config.LOG_INFO,


        // enable / disable watching file and executing tests whenever any file changes
        autoWatch: true,


        // start these browsers
        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
        browsers: ['Chrome', 'PhantomJS', 'Safari'],


        // Continuous Integration mode
        // if true, Karma captures browsers, runs the tests and exits
        singleRun: false,

        // Concurrency level
        // how many browser should be started simultanous
        concurrency: Infinity
      })
    }
  #+END_SRC

  With that in place, run =./node_modules/.bin/karma start= from the
  command line and back away.

  There are errors! How should we fix them?

  Right! That thing. Go do that.

  Now we just need a couple more things: =angular-mocks= and
  =karma-chai=. Install =angular-mocks= with bower and add that
  too. It's code that Angular can use to make testing simpler.

** An honest to goodness test for Angular code

   #+BEGIN_SRC js
     describe('BoardController', function() {
       // this tells angular to automatically load the
       // bewd.tictactoe.board module
       beforeEach(module('bewd.tictactoe.board'));

       // the inject function handles the passed function
       // by tying it into angular's injection mechanisms
       it('should load the board for the current route', inject(function($controller, $httpBackend) {
         // this instructs angular to handle a GET request for the given url
         // with the given response
         $httpBackend.whenGET('/games/1').respond(200, { board: [['X', 'X', 'X'], [ 'O', 'O', 'O' ], ['X', 'O', 'X' ]] });

         // $controller is used to create an instance of the controller
         // the second parameter we can use to override what the controller
         // is expecting from angular
         var boardController = $controller('BoardController', { $routeParams: { id: 1 }});

         // make all the requests resolve themselves
         $httpBackend.flush();

         // And check that the request result was properly handled
         boardController.theBoard.should.deep.equal([['X', 'X', 'X'], [ 'O', 'O', 'O' ], ['X', 'O', 'X' ]]);
       }));
     });

   #+END_SRC

   - What are your thoughts about this test?
   - How could we improve it?
   - What other conditions do we need to test for?
   - Anything else?

* Single Page Applications

   - Using APIs
   - Building an API
   - Managing state and routing

